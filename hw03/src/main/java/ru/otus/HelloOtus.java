/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ru.otus;

import ru.otus.annotations.After;
import ru.otus.annotations.Before;
import ru.otus.annotations.Test;

import java.lang.annotation.Annotation;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

@SuppressWarnings("java:S106")
public class HelloOtus {
    public static void main(String... args) {
        run("ru.otus.ExampleTest");
    }

    public static void run(String className) {
        try {
            var clazz = Class.forName(className);

            var beforeMethods = getAnnotatedMethods(clazz, Before.class);
            var testMethods = getAnnotatedMethods(clazz, Test.class);
            var afterMethods = getAnnotatedMethods(clazz, After.class);

            for (var testMethod : testMethods) {
                runTest(clazz, beforeMethods, testMethod, afterMethods);
            }
            TestResults.totalTestCount = testMethods.size();

            printReport();
        } catch (Exception e) {
            throw new RuntimeException(e);
        }

    }

    private static void runTest(Class<?> clazz, List<Method> beforeMethods, Method testMethod, List<Method> afterMethods) throws NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException {
        var constructor = clazz.getConstructor();
        var object = constructor.newInstance();
        for (var beforeMethod : beforeMethods) {
            beforeMethod.invoke(object);
        }

        try {
            testMethod.invoke(object);
            TestResults.passedTestsCount++;
        } catch (Exception e) {
            TestResults.failedTestsCount++;
        }

        for (var afterMethod : afterMethods) {
            afterMethod.invoke(object);
        }
    }

    private static List<Method> getAnnotatedMethods(Class<?> clazz, Class<? extends Annotation> annotationClass) {
        var methods = new ArrayList<Method>();
        for (var method : clazz.getDeclaredMethods()) {
            if (method.isAnnotationPresent(annotationClass)) {
                methods.add(method);
            }
        }
        return methods;
    }

    private static void printReport() {
        System.out.println("Всего тестов: " + TestResults.totalTestCount);
        System.out.println("Успешных тестов: " + TestResults.passedTestsCount);
        System.out.println("Неуспешных тестов: " + TestResults.failedTestsCount);
    }
}
